// Generate Playlist 

import axios from "axios";
import { useState, type ChangeEvent, type FormEvent } from "react"
import { useNavigate, useSearchParams } from "react-router";
import ViewPlaylist from "../ViewPlaylist/ViewPlaylist";

function GeneratePlaylistForm(){
    const [artist, setArtist] = useState("");
    const [genre, setGenre] = useState("");
    const [playlistName, setPlaylistName] = useState("");
    const [hasError, setHasError] = useState(false);
    const [complete, setComplete] = useState(false);
    const [playlistId, setPlaylistId] = useState("");
    const [isGenerating, setIsGenerating] = useState(true);

    const navigate = useNavigate();

    const USER_API_BASE_URL = `${import.meta.env.VITE_API_BASE_URL}/playlist-builder`; 

    function handlePlaylistName(e: ChangeEvent<HTMLInputElement>){
        setPlaylistName(e.target.value);
    }

    function handleArtist(e: ChangeEvent<HTMLInputElement>){
        setArtist(e.target.value);
    }

    function handleGenre(e: ChangeEvent<HTMLInputElement>){
        setGenre(e.target.value);
    }

    async function handleSubmit(e: FormEvent<HTMLFormElement>){
        e.preventDefault();
        setHasError(false);

        const token = localStorage.getItem("TOKEN");
        const spotifyUserId = localStorage.getItem("SPOTIFY-USER-ID");
        
        if (!token) {
            console.log("Login token is not working.")
            setHasError(true);
            return;
        }

        if (!spotifyUserId) {
            console.log(spotifyUserId)
            console.log("Spotify user id invalid.")
            setHasError(true);
            return;
        }

        if (!playlistName) {
            console.log(playlistName)
            console.log("Playlist name is empty.")
            setHasError(true);
            return;
        }

        if (!genre && !artist) {
            console.log("Must include a genre or an artist. Cannot leave fields empty.")
            setHasError(true);
            return;
        }

        try {
           // create playlist call 
            const emptyPlaylist = await axios.post(`${import.meta.env.VITE_API_BASE_URL}/spotify/playlists/${spotifyUserId}`, {}, {
                params:{
                    name:`${playlistName}`,
                    public: "true",
                    collaborative: "false",
                    description: "Generated by HeartSync API"
                },
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                }
            });

            console.log("Empty playlist created:", emptyPlaylist.data);
            setPlaylistId(emptyPlaylist.data.playlistId);

            // populate playlist call
            const populatedPlaylist = await axios.post(`${USER_API_BASE_URL}/`, {}, 
            {
                params:{
                    playlistId: emptyPlaylist.data.playlistId,
                    genre:`${genre}`,
                    artist:`${artist}`
                },
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                }
            });

            console.log("Playlist:", populatedPlaylist.data);
            setComplete(true);
            setIsGenerating(false);
            // 
            
        } catch (error) {
            setHasError(true);
            if (axios.isAxiosError(error)) {
                console.error("API Error:", error.response?.data || error.message);
            } else {
                console.error("Unexpected error:", error);
            }
        }
    }

    return (
         <form onSubmit={handleSubmit}>
            <input
                title="Playlist Name"
                type="text"
                placeholder="Name your Playlist"
                value={playlistName}
                onChange={handlePlaylistName}
            />
            <br></br>
            <input
                title="Genre"
                type="text"
                placeholder="Genre"
                value={genre}
                onChange={handleGenre}
            />
            <br></br>
            <input
                title="Artist"
                type="text"
                placeholder="Artist"
                value={artist}
                onChange={handleArtist}
            />
            <br></br>
            <input type="submit" value="Generate Playlist" />
            {hasError && (
                <p style={{color: 'red'}}>
                    Error: Please provide a playlist name, at least a genre or artist, and make sure you've connected to Spotify.
                </p>
            )}
            {/* {!hasError && !complete && isGenerating && (
                <div>
                    <p>
                        Generating playlist ...
                    </p>
                </div>
            )} */}
            {!hasError && complete && !isGenerating && (
                <div>
                    <p style={{color:'green'}}>
                        Successfully generated a playlist!
                    </p>
                    <div>
                        <ViewPlaylist playlistId={playlistId} />
                    </div>
                </div>
            )}

        </form>
    )
    
}

export default GeneratePlaylistForm;