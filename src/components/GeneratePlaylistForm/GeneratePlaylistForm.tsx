// Generate Playlist 

import axios from "axios";
import { useState, type ChangeEvent, type FormEvent } from "react"
import { Link, useNavigate, useSearchParams } from "react-router";
import ViewPlaylist from "../ViewPlaylist/ViewPlaylist";
import { useAuth } from "../../contexts/AuthContext";
import { ENVIRONMENT } from "../../constants";

function GeneratePlaylistForm() {
    const [artist, setArtist] = useState("");
    const [genre, setGenre] = useState("");
    const [playlistName, setPlaylistName] = useState("");
    const [hasError, setHasError] = useState(false);
    const [complete, setComplete] = useState(false);
    const [playlistId, setPlaylistId] = useState("");
    const [isGenerating, setIsGenerating] = useState(false);

    const { token } = useAuth();

    const navigate = useNavigate();

    const USER_API_BASE_URL = `${ENVIRONMENT.VITE_API_BASE_URL}/playlist-builder`;

    function handlePlaylistName(e: ChangeEvent<HTMLInputElement>) {
        setPlaylistName(e.target.value);
    }

    function handleArtist(e: ChangeEvent<HTMLInputElement>) {
        setArtist(e.target.value);
    }

    function handleGenre(e: ChangeEvent<HTMLInputElement>) {
        setGenre(e.target.value);
    }

    async function handleSubmit(e: FormEvent<HTMLFormElement>) {
        e.preventDefault();
        setHasError(false);

        const token = localStorage.getItem("TOKEN");
        const spotifyUserId = localStorage.getItem("SPOTIFY-USER-ID");

        if (!token) {
            console.log("Login token is not working.")
            setHasError(true);
            return;
        }

        if (!spotifyUserId) {
            console.log(spotifyUserId)
            console.log("Spotify user id invalid.")
            setHasError(true);
            return;
        }

        if (!playlistName) {
            console.log(playlistName)
            console.log("Playlist name is empty.")
            setHasError(true);
            return;
        }

        if (!genre && !artist) {
            console.log("Must include a genre or an artist. Cannot leave fields empty.")
            setHasError(true);
            return;
        }

        try {
            // create playlist call 
            const emptyPlaylist = await axios.post(`${ENVIRONMENT.VITE_API_BASE_URL}/spotify/playlists/${spotifyUserId}`, {}, {
                params: {
                    name: `${playlistName}`,
                    public: "true",
                    collaborative: "false",
                    description: "Generated by HeartSync API"
                },
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                }
            });

            console.log("Empty playlist created:", emptyPlaylist.data);
            setPlaylistId(emptyPlaylist.data.playlistId);
            setIsGenerating(true);

            // populate playlist call
            const populatedPlaylist = await axios.post(`${USER_API_BASE_URL}/`, {},
                {
                    params: {
                        playlistId: emptyPlaylist.data.playlistId,
                        genre: `${genre}`,
                        artist: `${artist}`
                    },
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`
                    }
                });

            console.log("Playlist:", populatedPlaylist.data);
            setComplete(true);
            setIsGenerating(false);

        } catch (error) {
            setHasError(true);
            if (axios.isAxiosError(error)) {
                console.error("API Error:", error.response?.data || error.message);
            } else {
                console.error("Unexpected error:", error);
            }
        }
    }

    return (
        <>
            {token ? (
                <form
                    style={{margin:"60px", width:"400px"}}
                    aria-label="Generate Playlist"
                    onSubmit={handleSubmit}
                >
                    <div className="form-floating mb-3">
                        <input 
                            type="text" 
                            className="form-control" 
                            id="floatingPlaylistName" 
                            placeholder="Playlist Name"
                            value={playlistName}
                            onChange={handlePlaylistName}
                        />
                        <label htmlFor="floatingPlaylistName">Playlist Name</label>
                    </div>
                    <div className="form-floating mb-3">
                        <input 
                            type="text" 
                            className="form-control" 
                            id="floatingGenre" 
                            placeholder="Genre"
                            value={genre}
                            onChange={handleGenre}
                        />
                        <label htmlFor="floatingGenre">Genre</label>
                    </div>
                     <div className="form-floating mb-3">
                        <input 
                            type="text" 
                            className="form-control" 
                            id="floatingArtist" 
                            placeholder="Artist"
                            value={artist}
                            onChange={handleArtist}
                        />
                        <label htmlFor="floatingArtist">Artist</label>
                    </div>
            
                    <input type="submit" value="Generate Playlist" />
                    {hasError && (
                        <div className="alert alert-danger" role="alert">
                            Error: Please provide a playlist name, at least a genre or artist, and make sure you've connected to Spotify.
                        </div>
                    )}
                    {!hasError && isGenerating && (
                        <div style={{wordSpacing:"20px"}}className="spinner-border" role="status">
                            <span className="visually-hidden" role="status">Generating Playlist...</span>
                        </div>
                    )}
                    {!hasError && complete && (
                        <div>
                            <button 
                                className="btn btn-primary"
                                onClick={() => navigate(`/view-playlist/${playlistId}`)}
                            >
                                View Playlist
                            </button>
                            
                        </div>
                    )}

                </form>
            ) : (
                <p>
                    Please <Link to="/login">log in</Link> to generate a playlist.
                </p>
            )}
        </>
    )

}

export default GeneratePlaylistForm;